"""
Network for Expert Network (Expert-Net)
Codes partically based on https://github.com/NVlabs/MUNIT
Created on 10/13/2020
@author DreamTale
"""

# logger options
image_save_iter: 1000         # How often do you want to save output images during training
image_display_iter: 1000      # How often do you want to display output images during training
display_size: 16              # How many images do you want to display each time
snapshot_save_iter: 50000     # How often do you want to save trained models
log_iter: 10                  # How often do you want to log the training stats
exp_name: hazelnut            # Save file name for the trained model

# optimization options
max_iter: 500000             # maximum number of training iterations
batch_size: 1                 # batch size
weight_decay: 0.0001          # weight decay
beta1: 0.5                    # Adam parameter
beta2: 0.999                  # Adam parameter
init: kaiming                 # initialization [gaussian/kaiming/xavier/orthogonal]
lr: 0.0001                    # initial learning rate
lr_policy: step               # learning rate scheduler
step_size: 50000              # how often to decay learning rate
gamma: 0.5                    # how much to decay learning rate
gan_w: 1                      # weight of adversarial loss
recon_x_w: 10                 # weight of image reconstruction loss
recon_d_w: 1                  # weight of detail reconstruction loss
recon_c_w: 1                  # weight of content reconstruction loss
edge_w: 0                     # weight of reconstructed edge loss

# model options
gen:
  dim: 64                     # number of filters in the bottommost layer
  mlp_dim: 256                # number of filters in MLP
  detail_dim: 8               # length of detail code
  activ: relu                 # activation function [relu/lrelu/prelu/selu/tanh]
  n_downsample: 2             # number of downsampling layers in content encoder
  n_res: 2                    # number of residual blocks in content encoder/decoder
  pad_type: reflect           # padding type [zero/reflect]

# data options
input_dim_i: 3                              # number of image channels [1/3]
input_dim_m: 3                              # number of image channels [1/3]
num_workers: 8                              # number of data loading threads
new_size: 256                               # first resize the shortest image side to this size
crop_image_height: 256                      # random crop image of this height
crop_image_width: 256                       # random crop image of this width